# int2048

高精度计算是一种程序设计的算法。由于中央处理器的字长限制，如 32 位 CPU 中一个整数最大只能取值 4,294,967,295。因此在进行更大范围的数值计算中，往往要采取模拟手段。通常通过分离字符的方法通过数字数组进行输入、通过数组倒序输出、通过模拟竖式计算进行计算。一般而言，主要模拟的是按位运算，可以用不同的进位制达成不同的目的。

本次作业要求用 C++ 实现整数的高精度加减乘除。

### 实现要求

要求实现一个 C++ 的大整数类，命名为 `int2048`。

接口已在 `int2048.h` 中给出，你需要新建一个 `int2048.cpp` 文件，在其中实现给定的接口。

当然，你也可以在**兼容当前所有接口**的基础之上，自己添加新的接口或修改原有接口（例如实现 `swap` 函数、右值构造函数）。

相应的实现应该在 `int2048.cpp` 中完成，不要在 `int2048.h` 中实现。在 OJ 提交中，需要将 `int2048.cpp` 中的实现复制到 `int2048.h` 之中，再进行提交。

#### 一些特殊要求

**你不需要考虑除数或模数为 0 的情况。在该情况下，程序的行为属于未定义行为。我们保证测试点中不会出现这样的数据。**

在我们的大整数类的实现中，对于除法操作 `x / y` ，其结果总是向下取整（即类似 python 中整除操作的表现）:

```python
# 这是一段 python 代码
print(10 // 3, -10 // 3, 10 // -3, -10 // -3)
# 输出 3 -4 -4 3
# 因为 -10 / -3 = 3.333... 向下取整即为 3
# 而 10 / -3 = -3.333... 向下取整即为 -4
```

需要注意的是，C++ 中，[有符号整数的除法](https://en.cppreference.com/w/cpp/language/operator_arithmetic)是向 0 取整。

```C++
// 这是一段 C++ 代码
std::cout
    << 10 / 3   << ' '
    << 10 / -3  << ' '
    << -10 / 3  << ' '
    << -10 / -3 << '\n';
// 输出 3 -3 -3 3
// 因为 -10 / -3 = 3.333 向 0 取整即为 3
// 而 10 / -3 = -3.333... 向 0 取整即为 -3
```

而对于取模操作 `x % y` ，其被定义为 `x % y = x - (x / y) * y` 。

### 评分标准
你需要通过的ACMOJ_PROBLEM_ID为6个：
2014	int2048-基础测试
2015	int2048-运算符重载
2016	int2048-压位测试
2017	int2048-乘法速度测试
2018	int2048-除法速度测试
2019	int2048-压力测试

请务必保证你的代码有足够的健壮性，能够应对各种极端情况。

### 数据范围

2014:


本道题即为 Integer 1，只考察：
```cpp
  // 读入一个大整数
  void read(const std::string &s);
  // 输出储存的大整数
  void print();

  // 加上一个大整数
  int2048 &add(const int2048 &);
  // 输出两个大整数之和
  friend int2048 add(int2048, const int2048 &);

  // 减去一个大整数
  int2048 &minus(const int2048 &);
  // 输出两个大整数之差
  friend int2048 minus(int2048, const int2048 &);
```

## 数据范围

本题是基础测试点，不会出现运算符重载。保证运算过程中数字绝对值 $\leq 10^{1000}$。

时空磁盘限制（运行时）
时间限制：1000 ms

内存空间限制：47 MiB

磁盘空间限制：不可使用磁盘


2015:

## 题目描述



本道题（及之后的所有题目）对应 Integer2，即考察：
```cpp
  int2048 operator+() const;
  int2048 operator-() const;

  int2048 &operator=(const int2048 &);

  int2048 &operator+=(const int2048 &);
  friend int2048 operator+(int2048, const int2048 &);

  int2048 &operator-=(const int2048 &);
  friend int2048 operator-(int2048, const int2048 &);

  int2048 &operator*=(const int2048 &);
  friend int2048 operator*(int2048, const int2048 &);

  int2048 &operator/=(const int2048 &);
  friend int2048 operator/(int2048, const int2048 &);

  int2048 &operator%=(const int2048 &);
  friend int2048 operator%(int2048, const int2048 &);

  friend std::istream &operator>>(std::istream &, int2048 &);
  friend std::ostream &operator<<(std::ostream &, const int2048 &);

  friend bool operator==(const int2048 &, const int2048 &);
  friend bool operator!=(const int2048 &, const int2048 &);
  friend bool operator<(const int2048 &, const int2048 &);
  friend bool operator>(const int2048 &, const int2048 &);
  friend bool operator<=(const int2048 &, const int2048 &);
  friend bool operator>=(const int2048 &, const int2048 &);
```

## 数据范围

本题是基础测试点，主要测试运算符重载。保证运算过程中数字绝对值 $\leq 10^{1000}$。
时空磁盘限制（运行时）
时间限制：1000 ms min, 5000 ms max

内存空间限制：47 MiB

磁盘空间限制：不可使用磁盘

2016:
## 数据范围

对于基础测试点，保证运算过程中数字绝对值 $\leq 10^{1000}$。

对于需要压位的测试点，保证运算过程中数字绝对值 $\leq 10^{30000}$，其中除法数字绝对值 $\leq 10^{3000}$。
时空磁盘限制（运行时）
时间限制：1000 ms min, 2500 ms max

内存空间限制：47 MiB

磁盘空间限制：不可使用磁盘

2017:
## 数据范围

本题是乘法速度测试

保证运算过程中数字绝对值 $\leq 10^{200000}$

 


时空磁盘限制（运行时）
时间限制：1000 ms

内存空间限制：47 MiB

磁盘空间限制：不可使用磁盘

2018:
## 数据范围

本题是除法速度测试

保证运算过程中数字绝对值 $\leq 10^{12000}$
时空磁盘限制（运行时）
时间限制：1000 ms

内存空间限制：47 MiB

磁盘空间限制：不可使用磁盘

2019:
## 数据范围

本题是速度测试

保证运算过程中数字绝对值 $\leq 10^{500000}$
时空磁盘限制（运行时）
时间限制：1000 ms min, 10000 ms max

内存空间限制：190 MiB

磁盘空间限制：不可使用磁盘




一些参考数据在/workspace/data/003/data/，注意参考数据并不一定是最后用来评测的数据
